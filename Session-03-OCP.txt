-----
 - RHCOP or CPU cluster.
   Cluster Details:-
    - student/student, root/redhat - Login to any VMs.
    - 3 nodes master/worker (In this lab - each cluster node act as master and worker same time).
	- Standard OCP cluster environment must be like
	  5 nodes (minumum) or on average 8-10 nodes cluster (3-master and rest 5-7 worker nodes).
	- As per Red Hat global labs and training:-
	- OCP cluster ready installed and kubeadmin-password & kubeconfig files are placed in specific servers as mentioned.
	  server name - utiltiy (from workstation VMs access utility server).
	   $ whoami ; hostname 
	    student 
		workstation.lab.example.com 
	   
	   $ ssh utility -l root 
	   # cd /home/lab/ocp4/auth/
	   # ls
	   kubeadmin-password  kubeconfig
	   
	   #### Copy the required contents ####
	   # cat kubeconfig | grep -i server 
	   server: https://api_url.apps.ocp4.example.com:6443   (Just an example).
	   # cat kubeadmin-password 
	   uiwgdiuaslkasjdlkasjl
	   
	   #### scp required files to jump server (workstation) ####
	   # scp -r kubeadmin-password kubeconfig student@workstation:/home/student      (Enter student's password)
	   # exit
	   
###########
LAB-01##
   Login to OCP cluster 
    $ pwd
	$ ls -l kubeadmin-password  kubeconfig
	$ oc login -u kubeadmin -p "uiwgdiuaslkasjdlkasjl" https://api_url.apps.ocp4.example.com:6443 
	$ oc whoami 
	$ oc get nodes 
	
Point 1- Login to OCP cluster using "oc" and web-console.
    CLI based login using "oc" - OpenShift-Client 
	GUI based Web Console login - Via Web browser using same as kubeadmin credentials login to OCP cluster.
    kubeadmin is cluster account (cluster-admin).
	
	 NOte: In both cases, Kubernetes/Openshift provides their rest API to manager all their resources.
	 

LAB-02##
- 
Part 1-
  user1-5  - 
  Details:-
  Group Name = sre_team ; 
  Identity Provider Name = sre_team_identity_provider; 
  Secret Name = sre_team_secret)
  Secret file name = file-users-sre_team.txt)
  
  for x in {6..10} ; do if [ -f file-users-sre_team.txt ]; then htpasswd -B -b file-users-sre_team.txt user${x} password@123 ; else htpasswd -c -B -b file-users-sre_team.txt user${x} password@123 ; fi ; done
  
  user6-10 - 
  
  Details:-
  Group Name = devops_team; 
  Identity Provider Name = devops_team_identity_provider, 
  Secret Name devops_team_secret;
  Secret file name = file-users-devops_team.txt 
  
  for x in {6..10} ; do if [ -f file-users-devops_team.txt ]; then htpasswd -B -b file-users-devops_team.txt user${x} password@123 ; else htpasswd -c -B -b file-users-devops_team.txt user${x} password@123 ; fi ; done 
  
  user11-30 
  
  Details:
  Group Name = application-01_team ; 
  Identity Provider Name = application-01_team_identity_provide; 
  Secret Name = application-01_team_secret;
  Secret file name = file-users-app-01_team.txt
  
  for x in {11..30} ; do if [ -f file-users-app-01_team.txt ]; then htpasswd -B -b file-users-app-01_team.txt user${x} password@123 ; else htpasswd -c -B -b file-users-app-01_team.txt user${x} password@123 ; fi ; done 
  
  user31-50 
  
  Details:
  Group Name = application-02_team ;
  Identity Provider Name = application-02_team_identity_provider; 
  Secret Name = application-02_team_secret;
  Secret file name = file-users-app-02_team.txt
  
  for x in {31..50} ; do if [ -f file-users-app-02_team.txt ]; then htpasswd -B -b file-users-app-02_team.txt user${x} password@123 ; else htpasswd -c -B -b file-users-app-02_team.txt user${x} password@123 ; fi ; done 
  
  user51-70 
  
  Details:
  Group Name = application-03_team ; 
  Identity Provider Name = application-03_team_identity_provider; 
  Secret Name= application-03_team_secret;
  Secret file name = file-users-app-03_team.txt
  
  for x in {51..70} ; do if [ -f file-users-app-03_team.txt ]; then htpasswd -B -b file-users-app-03_team.txt user${x} password@123 ; else htpasswd -c -B -b file-users-app-03_team.txt user${x} password@123 ; fi ; done 

################################################ LAB-02## Solution Start ##########

##***Step-01
Login to workstation as "student" user - student/student
$ ssh root@utility 
# cd /home/lab/ocp4/auth/
# ls 
kubeconfig 
kubeadmin-passwd
# scp kube* student@workstation:/home/student
Provide "student" as password
# exit

$ whoami ; hostname 
student 
workstation.lab.example.com 

$ ls -l kubeadmin-password  kubeconfig
 Note: Copy the required contents from both files and use the same to login to OCP cluster.

$ cat kubeconfig | grep -i server 
server: https://api_url.apps.ocp4.example.com:6443   (Just an example).

$ cat kubeadmin-password 
uiwgdiuaslkasjdlkasjl        (Just an example).

##***Step-02 - Login to OCP cluster 

    $ pwd
	$ ls -l kubeadmin-password  kubeconfig
	$ oc login -u kubeadmin -p "uiwgdiuaslkasjdlkasjl" https://api_url.apps.ocp4.example.com:6443 
	$ oc whoami 
	$ oc get nodes 


##***Step-03 - Create users (for multiple teams).
$ mkdir work
$ cd work 
$pwd
/home/student/work 

************* SRE team 
Note: password@123 or redhat@123 only to setup.
*** OPtion-01 
$ htpasswd -c -B -b file-users-sre_team.txt user1 password@123
$ htpasswd  -B -b file-users-sre_team.txt user2 password@123
$ htpasswd  -B -b file-users-sre_team.txt user3 password@123
$ htpasswd  -B -b file-users-sre_team.txt user4 password@123
$ htpasswd  -B -b file-users-sre_team.txt user5 password@123
***
or 
**** OPtion-02 
$ htpasswd -c -B -b file-users-sre_team.txt user1 password@123
$ for x in {1..5} ; do  htpasswd -B -b file-users-sre_team.txt user${x} password@123 ; done
*** 

*** OPtion-03 
$ for x in {2..5} ; do if [ -f file-users-sre_team.txt ]; then htpasswd -B -b file-users-sre_team.txt user${x} password@123 ; else htpasswd -c -B -b file-users-sre_team.txt user${x} password@123 ; fi ; done
***

## Verify your file (which we need to upload to OCP cluster - using secret).
$ cat file-users-sre_team.txt

NOte: ****
htpasswd is a utility to create user (who can do web authentication.
file-users-sre_team.txt - file 
user1   - user 
password@123 - password of user1 

************* SRE team work  Ends here  

Note: Same need to follow for other teams.


###########
for x in {1..5} ; do if [ -f file-users-sre_team.txt ]; then htpasswd -B -b file-users-sre_team.txt user${x} password@123 ; else htpasswd -c -B -b file-users-sre_team.txt user${x} password@123 ; fi ; done


for x in {6..10} ; do if [ -f file-users-devops_team.txt ]; then htpasswd -B -b file-users-devops_team.txt user${x} password@123 ; else htpasswd -c -B -b file-users-devops_team.txt user${x} password@123 ; fi ; done



for x in {11..30} ; do if [ -f file-users-app-01_team.txt ]; then htpasswd -B -b file-users-app-01_team.txt user${x} password@123 ; else htpasswd -c -B -b file-users-app-01_team.txt user${x} password@123 ; fi ; done


for x in {31..50} ; do if [ -f file-users-app-02_team.txt ]; then htpasswd -B -b file-users-app-02_team.txt user${x} password@123 ; else htpasswd -c -B -b file-users-app-02_team.txt user${x} password@123 ; fi ; done


for x in {51..70} ; do if [ -f file-users-app-03_team.txt ]; then htpasswd -B -b file-users-app-03_team.txt user${x} password@123 ; else htpasswd -c -B -b file-users-app-03_team.txt user${x} password@123 ; fi ; done

###########


##***Step-04 - Create secret (for multiple teams) 

$ oc create secret generic sre_team_secret --from-file htpasswd=file-users-sre_team.txt -n openshift-config
$ oc create secret generic devops-team-secret --from-file htpasswd=file-users-devops_team.txt -n openshift-config
$ oc create secret generic app-01-team-secret --from-file htpasswd=file-users-app-01_team.txt -n openshift-config
$ oc create secret generic app-02-team-secret --from-file htpasswd=file-users-app-02_team.txt -n openshift-config
$ oc create secret generic app-03-team-secret --from-file htpasswd=file-users-app-03_team.txt -n openshift-config


Verify the secrets 
$ oc get secret -n openshift-config | grep team_secret


##***Step-05 - Update to oauth file which will update to OCP cluster.
$ oc get oauth/cluster -o yaml >> oauth.yaml
UPdate the file as per given instructions.

https://access.redhat.com/documentation/en-us/openshift_container_platform/4.5/html/authentication_and_authorization/understanding-identity-provider#identity-provider-default-CR_understanding-identity-provider

$ oc replace -f oauth.yaml 

Verify user's login to OCP cluster.

$ oc login -u user1 -p password@123 API_URL_link 



################################################ LAB-02## Solution End #############
LAB-03##  
Part 2-
  groups:-
  sre_team_grp            - user1-5
  devops_team_grp         - user6-10 
  application-01_team_grp - user11-30
  application-02_team_grp - user31-50
  application-03_team_grp - user51-71
  
  

LAB-04##
Part 3-  
  Setup and implement RBAC 
  1) Assigned "cluster-admin" role to sre_team_grp
  2) Delete kubeadmin account (delete kube:admin secret) - kube-system (namespace) 
  3) self-provisioner remove from groups (system-authenticated-oauth)
     NOte: By default all users part of this group (system-authenticated-oauth)
  4) Assign "self-provisioner" to "devops_team_grp" 
  5) Assigned "cluster-admin" role to user6 and user10 
  6) Project creation.
  
LAB-05##
Part 4-  
  sre_team_project                 (cluster-admin) 
  devops_team_project              (self-provisioner
  application-01_team_project      (user11/12/13 - project admin, user14-25 - Edit, user26-30 View)
  application-02_team_project      (user31/32/33 - project admin, user34-45 - Edit, user46-50 View)
  application-03_team_project      (user51/52/53 - project admin, user54-65 - Edit, user66-70 View)
 ===============================================
#### Application deployment on Kubernetes/Openshift env.
- To deploy simple application, some required minimal resources.
  - POD 
  - service or svc 
  - Deploymemnt 
  - DeploymentConfig (dc)
  - BuildConfig (bc) 
  - secret (generic, docker-registry, tls
  - COnfigMap (cm).
  - Image STream etc 	
  - Route/ingress  

Step 1. Login to OCP clutser as cluster-admin/admin (sre_users or kubeadmin - if you have not deleted kubeadmin).

$ oc login -u kubeadmin -p kjasdhjaskd API_URL 

Step 2) Verify your project and access.
 $ oc new-project project-01 
 $ oc project -q 
 project-01 
 
 $ oc get pods
 $ oc get svc 
 $ oc get deploymnent
 $ oc get route 
 $ oc get is
 
NO result from above.

STep 3)

 $ oc new-app app01 httpd     (app01 - is an application and httpd is can image used to build application).
 $ oc get pods 
 
 $ oc get svc 
 $ oc get deployment
 $ oc get is 

Step 4) Access the application outside the oCP cluster.

 $ oc expose service --hostname anything.ocp4.example.com 
 
 
 
 
 